Tomando como exemplo qualquer dos ultimos trabalhos onde usamos a classe DoublyLinkedList, vamos agora implementar
 alguns novos métodos dentro da classe DoublyLinkedList.

Como já havia comentado os métodos presentes atualmente na classe limitam as ações que podemos realizar.
 Portanto, implementem os métodos abaixo para expandir a funcionalidade de nossa classe.

O método get já está pronto como um exemplo.
Logo abaixo segue também um exemplo do main() testando essas novas funcionalidades.



---- METODOS NOVOS A SEREM IMPLEMENTADOS ----

  // Retorna o objeto E presente na posicao indicada por index ou null caso a posicao seja invalida
  public E get(int index) {
    int count = 0;
    if (index > size)
        return null;
    
    NodeDouble<E> walk = header.getNext();
    while (walk != trailer) {
      if (count == index) {
          return walk.getElement();
      }
      walk = walk.getNext();
      count++;
    }
    return null;
  }

   // TODO Retorna a posicao do elemento "e" dentro da lista ou -1 caso nao encontre
 public int indexOf(E e) {
//     int index = 0;
//     if (o == null) {
//         for (Node<E> x = first; x != null; x = x.next) {
//             if (x.item == null)
//                 return index;
//             index++;
//         }
//     } else {
//         for (Node<E> x = first; x != null; x = x.next) {
//             if (o.equals(x.item))
//                 return index;
//             index++;
//         }
//     }
//     return -1;
}
	 
 

 // TODO Busca na lista e remove o elemento na posicao especificada pelo index
 public E remove(int index) {
//     checkElementIndex(index);
//     return unlink(node(index));
 }

 // TODO Busca na lista e remove o objeto. Retorna true/false
 public boolean remove(E o) { 
//	 if (o == null) {
//         for (Node<E> x = first; x != null; x = x.next) {
//             if (x.item == null) {
//                 unlink(x);
//                 return true;
//             }
//         }
//     } else {
//         for (Node<E> x = first; x != null; x = x.next) {
//             if (o.equals(x.item)) {
//                 unlink(x);
//                 return true;
//             }
//         }
//     }
//     return false;
 }  

// TODO Insere o elemento E no posicao especificado por index
public void add(int index, E element) {
//     checkPositionIndex(index);
//
//     if (index == size)
//         linkLast(element);
//     else
//         linkBefore(element, node(index));
//     
 }






---- EXEMPLO DA FUNCAO MAIN TESTANDO ESSES NOVOS METODOS ---

    public static void main(String[] args) {
        
        DoublyLinkedList2<CreditCardGratuito> testCards;
        testCards = new DoublyLinkedList2<CreditCardGratuito>();
        testCards.addLast(new CreditCardGratuito("Joao", "Itau", "34346756756"));
        testCards.addLast(new CreditCardGratuito("Maria", "BB", "435767789768"));
        testCards.addLast(new CreditCardGratuito("Giberto", "CEF", "12335769"));
        
        System.out.println("Test do get");
        System.out.println(testCards.get(0));
        System.out.println(testCards.get(1));
        System.out.println(testCards.get(2));
        
        System.out.println("\n\nTest do indexOf");
        System.out.println(testCards.indexOf(testCards.get(0)));
        System.out.println(testCards.indexOf(testCards.get(1)));
        System.out.println(testCards.indexOf(testCards.get(2)));

        System.out.println("\n\nTest do add -- foi adicionado mais um item ao comeco da lista");
        testCards.add(2, testCards.get(0));
        System.out.println(testCards);
        
        System.out.println("\n\nTest do remove(index) -- foi removido o item de indice 1");
        testCards.remove(1);
        System.out.println(testCards);
        
        System.out.println("\n\nTest do remove(objeto) -- foi removido o item de indice 2, 3o elemento da lista");
        testCards.remove(testCards.get(2));
        System.out.println(testCards);
        
    }





---- EXEMPLO DA SAIDA IMPRESSA DA EXECUCAO DA FUNCAO MAIN ---

Test do get
Cliente = Joao, Saldo = 0.0, Limite = 500
Cliente = Maria, Saldo = 0.0, Limite = 500
Cliente = Giberto, Saldo = 0.0, Limite = 500

Test do indexOf
0
1
2

Test do add -- foi adicionado mais um item ao comeco da lista
(Cliente = Joao, Saldo = 0.0, Limite = 500
, Cliente = Maria, Saldo = 0.0, Limite = 500
, Cliente = Joao, Saldo = 0.0, Limite = 500
, Cliente = Giberto, Saldo = 0.0, Limite = 500
)

Test do remove(index) -- foi removido o item de indice 1
Elemento a ser removido foi encontrado
(Cliente = Joao, Saldo = 0.0, Limite = 500
, Cliente = Joao, Saldo = 0.0, Limite = 500
, Cliente = Giberto, Saldo = 0.0, Limite = 500
)

Test do remove(objeto) -- foi removido o item de indice 2, 3o elemento da lista
Elemento a ser removido foi encontrado
(Cliente = Joao, Saldo = 0.0, Limite = 500
, Cliente = Joao, Saldo = 0.0, Limite = 500
)